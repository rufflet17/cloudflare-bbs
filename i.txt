<!DOCTYPE html>
<html lang="ja">
<!-- headとstyleは変更なし -->
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Cloudflare BBS</title>
  <style>
    body { font-family: 'MS PGothic', 'Hiragino Kaku Gothic ProN', Meiryo, sans-serif; background-color: #efefef; color: #333; }
    header { background-color: #ddd; padding: 10px; text-align: center; }
    main { max-width: 800px; margin: 20px auto; background-color: #fff; padding: 20px; border: 1px solid #ccc; }
    h2, h3 { border-bottom: 2px solid #99c; }
    form { display: flex; flex-direction: column; gap: 10px; margin-top: 10px; }
    input, textarea { padding: 8px; border: 1px solid #ccc; border-radius: 4px; font-family: inherit; }
    button { padding: 10px; background-color: #007bff; color: white; border: none; cursor: pointer; border-radius: 4px; }
    button:hover { background-color: #0056b3; }
    #thread-list .thread-item { cursor: pointer; padding: 10px; border-bottom: 1px dotted #ccc; display: flex; justify-content: space-between; align-items: center; }
    #thread-list .thread-item:hover { background-color: #f0f8ff; }
    .thread-details { flex-grow: 1; }
    .thread-meta { font-size: 0.8em; color: #666; text-align: right; white-space: nowrap; }
    .post { margin-bottom: 15px; }
    .post-header { font-size: 0.9em; color: #006400; font-weight: bold; }
    .post-header .post-date { color: #555; font-weight: normal; margin-left: 10px; }
    .post-body { margin-left: 1em; line-height: 1.6; white-space: pre-wrap; word-wrap: break-word; }
    #back-to-list-btn { margin-bottom: 15px; }
    .loading-message { text-align: center; padding: 20px; color: #666; }
  </style>
</head>
<!-- bodyとmainの構造は変更なし -->
<body>
  <header>
    <h1>Cloudflare BBS</h1>
  </header>

  <main>
    <div id="thread-list-view">
      <h2>スレッド一覧</h2>
      <div id="thread-list"></div>
      <hr>
      <h3>新しいスレッドを立てる</h3>
      <form id="new-thread-form">
        <input type="text" id="new-thread-title" placeholder="スレッドタイトル" required>
        <input type="text" id="new-thread-author" placeholder="名前 (省略可)">
        <textarea id="new-thread-body" placeholder="最初の書き込み" rows="4" required></textarea>
        <button type="submit">スレッド作成</button>
      </form>
    </div>
    <div id="thread-content-view" style="display: none;">
      <button id="back-to-list-btn">&laquo; スレッド一覧に戻る</button>
      <h2 id="thread-title"></h2>
      <div id="posts-container"></div>
      <hr>
      <h3>レスを書き込む</h3>
      <form id="new-post-form">
        <input type="hidden" id="current-thread-id">
        <input type="text" id="new-post-author" placeholder="名前 (省略可)">
        <textarea id="new-post-body" placeholder="書き込み内容" rows="4" required></textarea>
        <button type="submit">書き込む</button>
      </form>
    </div>
  </main>
  
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // 基本的な要素取得とイベントリスナーは変更なし
      const threadListView = document.getElementById('thread-list-view');
      const threadContentView = document.getElementById('thread-content-view');
      const threadListContainer = document.getElementById('thread-list');
      
      document.getElementById('new-thread-form').addEventListener('submit', createNewThread);
      document.getElementById('new-post-form').addEventListener('submit', createNewPost);
      document.getElementById('back-to-list-btn').addEventListener('click', () => {
        history.pushState({ view: 'list' }, '', '/');
        showThreadList();
      });

      // --- Helper Functions ---
      const escapeHTML = (str) => str ? str.replace(/[&<>"']/g, (match) => ({ '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;' }[match])) : '';
      
      async function handleApiError(response) {
        const errorData = await response.json();
        throw new Error(errorData.error || '不明なエラーが発生しました。');
      }

      // --- Rendering Functions ---
      function renderPosts(posts) {
          const postsContainer = document.getElementById('posts-container');
          postsContainer.innerHTML = '';
          posts.sort((a, b) => a.post_number - b.post_number).forEach(post => {
            if (!post) return; // 欠損のままのデータをスキップ
            const div = document.createElement('div');
            div.className = 'post';
            div.innerHTML = `
              <div class="post-header">
                <span>${post.post_number}: ${escapeHTML(post.author || '名無しさん')}</span>
                <span class="post-date">${new Date(post.created_at).toLocaleString('ja-JP')}</span>
              </div>
              <div class="post-body">${post.body.replace(/\n/g, '<br>')}</div>
            `;
            postsContainer.appendChild(div);
          });
      }

      // --- API Call Functions ---
      async function fetchAndDisplayThreads() {
        try {
          const response = await fetch('/api/threads');
          if (!response.ok) await handleApiError(response);
          const threads = await response.json();
          
          threadListContainer.innerHTML = '';
          threads.forEach(thread => {
              const div = document.createElement('div');
              div.className = 'thread-item';
              div.innerHTML = `
                <div class="thread-details">
                  ${thread.id}: <strong>${escapeHTML(thread.title)}</strong>
                </div>
                <div class="thread-meta">
                  レス: ${thread.post_count}<br>
                  更新: ${new Date(thread.last_updated).toLocaleString('ja-JP', { year:'2-digit', month:'2-digit', day:'2-digit', hour: '2-digit', minute: '2-digit'})}
                </div>
              `;
              div.addEventListener('click', (e) => {
                  e.preventDefault();
                  history.pushState({ view: 'thread', threadId: thread.id }, `スレッド: ${thread.title}`, `/threads/${thread.id}`);
                  viewThread(thread.id, thread);
              });
              threadListContainer.appendChild(div);
          });
        } catch (error) { console.error(error); alert(error.message); }
      }

      async function viewThread(threadId, threadInfo) {
          threadListView.style.display = 'none';
          threadContentView.style.display = 'block';
          window.scrollTo(0, 0);

          const postsContainer = document.getElementById('posts-container');
          postsContainer.innerHTML = '<div class="loading-message">読み込み中...</div>';
          document.getElementById('thread-title').textContent = threadInfo.title;
          document.getElementById('current-thread-id').value = threadId;

          try {
              // 1. まずスレッドの最新情報を取得して総レス数を知る
              const threadResponse = await fetch(`/api/threads/${threadId}/info`);
              if (!threadResponse.ok) await handleApiError(threadResponse);
              const latestThreadInfo = await threadResponse.json();
              const postCount = latestThreadInfo.post_count;

              // 2. 全投稿のキャッシュを並行して取得試行 (CDNに対して)
              const postPromises = [];
              for (let i = 1; i <= postCount; i++) {
                  postPromises.push(
                      fetch(`/api/threads/${threadId}/posts/${i}`).then(res => res.ok ? res.json() : null)
                  );
              }
              const allPostsResult = await Promise.all(postPromises);

              // 3. 欠損している投稿番号をリストアップ
              const missingPostNumbers = [];
              allPostsResult.forEach((post, index) => {
                  if (!post) {
                      missingPostNumbers.push(index + 1);
                  }
              });

              let finalPosts = allPostsResult.filter(p => p);

              // 4. 欠損分があればサーバーに問い合わせて補完
              if (missingPostNumbers.length > 0) {
                  postsContainer.innerHTML = '<div class="loading-message">読み込み中...<br>更新頻度が低いスレッドは取得に時間がかかる場合があります。</div>';
                  
                  // D1から欠損分を取得するリクエスト
                  const missingResponse = await fetch(`/api/posts/get-missing`, {
                      method: 'POST',
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({ threadId, postNumbers: missingPostNumbers })
                  });
                  if (!missingResponse.ok) await handleApiError(missingResponse);
                  const newPosts = await missingResponse.json();
                  finalPosts = finalPosts.concat(newPosts);

                  // バックグラウンドでキャッシュ修復を依頼
                  fetch(`/api/internal/request-cache-repair`, {
                      method: 'POST',
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({ threadId, postNumbers: missingPostNumbers })
                  }).catch(err => console.error('Cache repair request failed:', err));
              }

              // 5. ページをレンダリング
              renderPosts(finalPosts);

          } catch (error) {
              console.error(error);
              postsContainer.innerHTML = `<div class="loading-message" style="color: red;">エラー: ${escapeHTML(error.message)}</div>`;
          }
      }
      
      // createNewThread, createNewPostは変更なし
      async function createNewThread(event) {
        event.preventDefault();
        const title = document.getElementById('new-thread-title').value;
        const author = document.getElementById('new-thread-author').value;
        const body = document.getElementById('new-thread-body').value;
        try {
          const response = await fetch('/api/threads', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ title, author, body })
          });
          if (!response.ok) await handleApiError(response);
          
          document.getElementById('new-thread-form').reset();
          await fetchAndDisplayThreads();
        } catch(error) { console.error(error); alert(error.message); }
      }

      async function createNewPost(event) {
        event.preventDefault();
        const threadId = document.getElementById('current-thread-id').value;
        const author = document.getElementById('new-post-author').value;
        const body = document.getElementById('new-post-body').value;
        try {
          const response = await fetch(`/api/threads/${threadId}/posts`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ author, body })
          });
          if (!response.ok) await handleApiError(response);
          const threadInfo = { id: threadId, title: document.getElementById('thread-title').textContent };
          document.getElementById('new-post-form').querySelector('textarea').value = '';
          await viewThread(threadId, threadInfo);
        } catch(error) { console.error(error); alert(error.message); }
      }
      
      // ページ表示のロジックを修正
      function showThreadList() {
        threadListView.style.display = 'block';
        threadContentView.style.display = 'none';
        fetchAndDisplayThreads();
      }
      
      // URLに応じて初期表示を切り替える
      const path = window.location.pathname;
      const threadMatch = path.match(/^\/threads\/(\d+)$/);
      if (threadMatch) {
        const threadId = parseInt(threadMatch[1], 10);
        // この場合、スレッド情報を取得する必要がある
        fetch(`/api/threads/${threadId}/info`).then(res => res.json()).then(threadInfo => {
           viewThread(threadId, threadInfo);
        });
      } else {
        showThreadList();
      }
      // ブラウザの戻る/進むボタンに対応
      window.onpopstate = (event) => {
        if (event.state?.view === 'thread') {
          viewThread(event.state.threadId, {id: event.state.threadId, title: ''}); // titleは再取得される
        } else {
          showThreadList();
        }
      };

    });
  </script>
</body>
</html>